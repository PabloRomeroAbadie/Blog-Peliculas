Vamos a crear la estructura html, primero un div con la clase layout. La palabra layout sirve para hacer referencia a la manera en que estan distribuidos los elementos y las formas dentro de un diseño. El layout puede tomarse como base para una página web, pues es a partir ese plan o diseño que esta se irá a desarrollar. Dicho de otro modo, el producto inicial de una página o sitio web es su layout, plantilla o diseño.

Dentro de este div, tendremos las diferente secciones primero el header con un logo que luego se colocara:

<!--Cabecera-->
        <header class="header">
            <h1>MisPelis</h1>
        </header>

Siguiendo con las secciones, la barra de navegacion:

<!--barra de navegacion-->
        <nav class="nav">
            <li><a href="#">Inicio</a></li>
            <li><a href="#">Peliculas</a></li>
            <li><a href="#">blog</a></li>
            <li><a href="#">Contacto</a></li>
        </nav>

La etiqueta nav tiene el proposito de proporcionar enlaces de navegacio, ya sea dentro del documento actual o a otros documentos. 

Como contenido principal vamos a tener un section con articles dentro, que es la etiqueta que corresponde semanticamente.

 <section class="content">
            <!--Aqui van las peliculas-->
            <article class="peli-item">
                <h3 class="title">Desarrollo web</h3>
                <p class="description">PabloRomeroAbadie</p>
                <button class="edit">Editar</button>
                <button class="delete">Borrar</button>
            </article>

Dentro de cada article iran las peliculas de la app que vamos a crear. 

Por otra parte, dentro del contenido principal, vamos a tener tambien una seccion con barra de busqueda y cargar peliculas:

<!--Barra lateral-->
        <aside class="lateral">
            <div class="search">
                <h3 class="title">Buscador</h3>
                <form>
                    <input type="text">
                    <button>Buscar</button>
                </form>
            </div>

            <div class="add">
                <h3 class="title">Añadir pelicula</h3>
                <form action="">
                    <input type="text" placeholder="Titulo">
                    <textarea placeholder="Descripcion"></textarea>
                    <input type="submit" value="Guardar">
                </form>
            </div>
        </aside>

La barra lateral sera un aside. El elemento html aside representa una seccion de una pagina que consiste en contenido que esta indirectamente relacionado con el contenido principal del documento. Estas secciones son a menudo representadas como barras laterales o como inserciones. 

Por ultimo el pie de pagina o footer:

 <!--Pie de pagina-->
        <footer class="footer">
            &copy:Master en Javascript ES12 Y TypeScript - <a href="#">Pablo</a>
        </footer>

al layout le aplicaremos estilos css, y veremos el display grid:

.layout {
    width: 100%;
    height: auto;

    display: grid;
    grid-template-areas: 
        "header header header header"
        "nav nav nav nav"
        "content content content lateral"
        "footer footer footer footer"
    ;

    grid-template-rows: 100px 70px auto 70px;

}

La grid-template-areas son una propiedad CSS que especifica áreas de cuadrícula con nombre , estableciendo las celdas en la cuadrícula y asignándoles nombres.

.header {
    grid-area: header;
    border: 5px solid black;
    background-color: lightcoral;
}

Aqui le asignamos a header el nombre de su grid area, para que ocupe el lugar que designamos anteriormente. 

Estilos del header:

.header {
    grid-area: header;
    background: white;
    text-align: left;
    font-style: italic;
}

El font style italic se usa para darle un estilo en cursiva. 

Tambien vamos agregar el html para hacer el logo de la pagina y luego los estilos para este logo:

<header class="header">
            <div class="logo">
                <div class="play"></div>
            </div>
            <h1>MisPelis</h1>
        </header>

.logo {
    background: linear-gradient(90deg, #03228f 10%, #0e73e4 100%);
    width: 40px;
    height: 40px;
    border-radius: 300px ;
}

Aqui aplicamos un linear gradient para hacer una especie de degradado, de 90 grados que vaya de un azul oscuro a uno mas claro. Y le ponemos un tamaño al div, de 40 por 40 y un border radius de 300px para que sea totalmente circular. 

Ahora vamos hacer el triangulo de play, y luego acomodaremos el contenido del header para que quede alineado como queremos. 

.play {
    width: 0;
    height: 0;
    margin-top: 15px;
    margin-left: 16px;
    border-left: 12px solid white;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
}

Lo primero es un width 0 y un height tambien 0, pondremos unos bordes y quitaremos otros para hacer precisamente el triangulo, un border left solido blanco, un border top solid transparent de la mitad de tamaño y ya veremos aparecer parte de este triangulo. 
Luego un margin top y un margin left para centrarlo, el elemento todavia no representa un triangulo perfecto por eso aplicamos el border botton.

Ahora si vamos a colocar los elementos del header uno al lado del otro. Podemos hacerlo con float y con la manera clasica de hacerlo pero tenemos tambien flexbox para poder aplicar dentro de nuestro header. 

A nuestro header aparte de las propiedades que ya tenia le vamos a colocar un display flex:

.header {
    grid-area: header;
    background: white;
    text-align: left;
    font-style: italic;
    display: flex;
    
}

Ahora el dibujo de play estara en medio del circulo y ya puedo decirle a al display flex que me justifique ese flexbox en medio de la pagina con justify content center y un aling items center para tener a la misma altura ambos elementos:

.header {
    grid-area: header;
    background: white;
    text-align: left;
    font-style: italic;
    display: flex;
    justify-content: center;
    align-items: center;
}

Luego solo agregamos margin a los lados del logo para que se separe del h1, y listo. 

Observacion: es una buena costumbre colocar comentarios que indiquen lo que estamos haciendo en esa porcion de codigo para cuando debamos buscar algo podamos guiarnos. Ejemplo:

/* Estilos generales */
body {
    background-color: #d1defa;
    font-family: sans-serif, Arial, Helvetica;
    text-align: center;
    padding: 0px;
    margin: 0px;
}

/* Estilos cabecera */
.header {
    grid-area: header;
...


ESTILOS DE LA BARRA DE NAVEGACION:

A todo el nav le damos un background que sera el mismo degradado que tenemos en el logo:

.nav{
    grid-area: nav;
    background: linear-gradient(90deg, #03228f 10%, #0e73e4 100%);
}

Luego a nuestra lista de enlaces le vamos a dar un display flex asi se coloquen uno al lado del otro, lo justificamos al medio horizontalmente y alineamos items al centro tambien, le quitamos los estilos por defecto:

.nav > ul {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
}

A los li le damos un padding para que se separen entre ellos:

.nav li {
    padding: 10px;
}

Y a los enlaces le colocamos un display block, margenes a ambos lados aumentamos el tamaño de la fuente junto con el grosor, le damos un color blanco a la letra para que contraste, le sacamos la decoracion por defecto y agregamos una transition de 300 ms que sera el tiempo de transicion para todo en nuestra pagina. 

.nav a {
    display: block;
    margin-left: 30px;
    margin-right: 30px;
    font-size: 18px;
    font-weight: lighter;
    color: white;
    text-decoration: none;
    transition: all 300ms;
}

Con el hover le daremos un transform que permita hacer una escala del elemento, lo que hara que al pasar el mouse por encima del elemento se agrande un poco. 

.nav a:hover {
    transform: scale(1.1,1.1);
}


/*Estilos para el contenido principal*/

.content{
    grid-area: content;
    background: #f6f7f9;
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-start;
    align-items: flex-start;
}

Aqui aplicamos un background junto con un display flex para que los elementos se coloquen uno al lado del otro y un flex-flow donde colocaremos row para que se comporten en formato de fila y un wrap, es decir cuando los elementos sobresalgan del espacio disponible utilicen otra linea abajo. Justificaremos (horizontalmente) el contenido con flex start y alineamos (verticalmente)tambien con flex start. Con esto le digo que empiecen en su lugar que no se centren ni al medio ni abajo ni al final. 

Ahora le vamos a dar estilos a las tarjetas de peliculas:

.peli-item {
    background: white;
    border-radius: 10px;
    box-shadow: 0px 0px 6px #ddd;
    margin: 20px;
    margin-left: 30px;
    margin-right: 30px;
    padding-top:60px;
    padding-bottom: 60px;
    padding-left: 25px;
    padding-right: 25px;
}

Le damos un background blanco que contraste con el gris, un border radius para darle aspecto a la tarjeta, una sombra pequeña, margenes y padding para hacerla mas estetica y bien acomodada. 

Estilos a los botones:

button,
input[type="submit"],
input[type="button"]{
    background:  #0b70e1;
    color: white;
    border: 0;
    outline: 0;
    padding: 15px;
    border-radius: 3px;
    width: 100px;
    margin-top: 15px;
    text-transform: capitalize;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 300ms;
}

Aqui le damos estilos a los botones de toda la pagina, un color de fondo y de letra, sacamos el borde y el contorno con outline, le ponemos un padding un radius un tamaño, el text-transform con el capitalize sirve para que transforme el texto que tenga el boton y coloque la primera letra con mayuscula. 

Luego un hover para los botones de editar y borrar asi cambia el color cuando pongo el mouse arriba del elemento:

.peli-item .edit:hover {
    background: #eb7700;
}

.peli-item .delete:hover {
    background: #9b0202;
}


